Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. 
In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. 
For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper 
formatting and comments where necessary.
In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. 
As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. 
You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure 
your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

SELECT COUNT(*)
FROM table_name


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = id: 10000
ii. Hours = business_id: 1562
iii. Category = business_id: 2643
iv. Attribute = business_id: 1115
v. Review = id: 10000, business_id: 8090, user_id: 9581
vi. Checkin = business_id: 493
vii. Photo = id: 10000, photo: 6493
viii. Tip = user_id: 537, business_id: 3979
ix. User = id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

SELECT COUNT(DISTINCT key_name)
FROM table_name


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: 
	No
	
	SQL code used to arrive at answer:
	Select
	Count(*) - Count(id),
	Count(*) - Count(name),
	Count(*) - Count(review_count),
	Count(*) - Count(yelping_since),
	Count(*) - Count(useful),
	Count(*) - Count(funny),
	Count(*) - Count(cool),
	Count(*) - Count(fans),
	Count(*) - Count(average_stars),
	Count(*) - Count(compliment_hot),
	Count(*) - Count(compliment_more),
	Count(*) - Count(compliment_profile),
	Count(*) - Count(compliment_cute),
	Count(*) - Count(compliment_list),
	Count(*) - Count(compliment_note),
	Count(*) - Count(compliment_plain),
	Count(*) - Count(compliment_cool),
	Count(*) - Count(compliment_funny),
	Count(*) - Count(compliment_writer),
	Count(*) - Count(compliment_photos)
	From user
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		
Select 
Min(column_name) as Min,
Max(column_name) as Max,
Avg(column_name) as Average
From table_name


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	Select 
	city,
	SUM(review_count) as SUMM
	From business
	Group by city
	Order by SUMM DESC
	
	Copy and Paste the Result Below:
	+-----------------+-------+
	| city            |  SUMM |
	+-----------------+-------+
	| Las Vegas       | 82854 |
	| Phoenix         | 34503 |
	| Toronto         | 24113 |
	| Scottsdale      | 20614 |
	| Charlotte       | 12523 |
	| Henderson       | 10871 |
	| Tempe           | 10504 |
	| Pittsburgh      |  9798 |
	| Montréal        |  9448 |
	| Chandler        |  8112 |
	| Mesa            |  6875 |
	| Gilbert         |  6380 |
	| Cleveland       |  5593 |
	| Madison         |  5265 |
	| Glendale        |  4406 |
	| Mississauga     |  3814 |
	| Edinburgh       |  2792 |
	| Peoria          |  2624 |
	| North Las Vegas |  2438 |
	| Markham         |  2352 |
	| Champaign       |  2029 |
	| Stuttgart       |  1849 |
	| Surprise        |  1520 |
	| Lakewood        |  1465 |
	| Goodyear        |  1155 |
	+-----------------+-------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
Select 
SUM(review_count),
stars
From business
Where city = 'Avon'
Group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------------+-------+
| SUM(review_count) | stars |
+-------------------+-------+
|                10 |   1.5 |
|                 6 |   2.5 |
|                88 |   3.5 |
|                21 |   4.0 |
|                31 |   4.5 |
|                 3 |   5.0 |
+-------------------+-------+

ii. Beachwood

SQL code used to arrive at answer:
Select 
SUM(review_count),
stars
From business
Where city = 'Beachwood'
Group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------------------+-------+
| SUM(review_count) | stars |
+-------------------+-------+
|                 8 |   2.0 |
|                 3 |   2.5 |
|                11 |   3.0 |
|                 6 |   3.5 |
|                69 |   4.0 |
|                17 |   4.5 |
|                23 |   5.0 |
+-------------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	Select 
	name,
	review_count
	From user
	Order by review_count DESC
	Limit 3
		
	Copy and Paste the Result Below:
		
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results: Correlation is quite weak. For example, Gerlad has 		only 253 fans with his 2000 review, whereas Mimi has respectively 497 and 968. 
	
	Select 
	name,
	review_count,
	fans
	From user
	Order by review_count DESC
	
	+-----------+--------------+------+
	| name      | review_count | fans |
	+-----------+--------------+------+
	| Gerald    |         2000 |  253 |
	| Sara      |         1629 |   50 |
	| Yuri      |         1339 |   76 |
	| .Hon      |         1246 |  101 |
	| William   |         1215 |  126 |
	| Harald    |         1153 |  311 |
	| eric      |         1116 |   16 |
	| Roanna    |         1039 |  104 |
	| Mimi      |          968 |  497 |
	| Christine |          930 |  173 |
	| Ed        |          904 |   38 |
	| Nicole    |          864 |   43 |
	| Fran      |          862 |  124 |
	| Mark      |          861 |  115 |
	| Christina |          842 |   85 |
	| Dominic   |          836 |   37 |
	| Lissa     |          834 |  120 |
	| Lisa      |          813 |  159 |
	| Alison    |          775 |   61 |
	| Sui       |          754 |   78 |
	| Tim       |          702 |   35 |
	| L         |          696 |   10 |
	| Angela    |          694 |  101 |
	| Crissy    |          676 |   25 |
	| Lyn       |          675 |   45 |
	+-----------+--------------+------+
	
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Love (1080 vs 82)

	
	SQL code used to arrive at answer:
	Select 
	Count(text)
	from review
	Where text Like'% love %'
	Union
	Select 
	Count(text)
	from review
	Where text Like'% hate %'
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	Select 
	name,
	fans
	From user
	Order by fans DESC
	Limit 10
	
	Copy and Paste the Result Below:
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
	# get limited table
	SELECT
	name,
	fans,
	useful
	From user
	Order by fans DESC
	Limit 10
	
	# calculate Pearson`s correlation (https://www.red-gate.com/simple-talk/blogs/statistics-sql-pearsons-correlation/)
	Doesn`t not work in online version of SQLite from coursera course and I can`t install addition function SQRT()
	SELECT 
	(SUM(items.fans*items.useful) - (SUM(items.fans)*SUM(items.useful)))/COUNT(items.fans) as num,	
	SQRT(SUM(items.fans*items.fans) -   (SUM(items.fans*items.fans)/COUNT(items.fans)))*SQRT(SUM(items.useful*items.useful) - (SUM(items.useful*items.useful)/COUNT(items.useful))) as denom	
	num/denom as corr
	FROM (SELECT
	      fans,
	      useful
	      From user
	      Order by fans DESC
	      Limit 10) items
	      
	Copy and Paste the Result Below:
	
	+-----------+------+--------+
	| name      | fans | useful |
	+-----------+------+--------+
	| Amy       |  503 |   3226 |
	| Mimi      |  497 |    257 |
	| Harald    |  311 | 122921 |
	| Gerald    |  253 |  17524 |
	| Christine |  173 |   4834 |
	| Lisa      |  159 |     48 |
	| Cat       |  133 |   1062 |
	| William   |  126 |   9363 |
	| Fran      |  124 |   9851 |
	| Lissa     |  120 |    455 |
	+-----------+------+--------+
	corr_useful = 0.1408
	Low correlation between fans - useful

	
	Please explain your findings and interpretation of the results:
	The result is 0.1408, which means that Pearson correlation is low. But in this case Spearman correlation is more reliable, because we have anomaly values for Harald and Gerald. 
	So, Spearman correlation is rs = 0.06667, p = 0.85481. Correlation low, but can`t be deny as insignificant with p level 0.05. We need more data.
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

I chose Phoenix and Food and got two places: Starbucks and Bootleggers Modern American Smokehouse 
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, 11:00 - 22:00 and 5:00 - 20:00

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, 431 vs 52         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
 No, their locations different. One place based in the center of city, and another - at the suburbs.

SQL code used for analysis:
SELECT
c.category,
b.city,
b.stars,
h.hours,
b.review_count,
b.name,
b.address
FROM (category c INNER JOIN business b ON c.business_id = b.id) INNER JOIN hours h ON b.id = h.business_id
WHERE b.city = 'Phoenix' AND c.category = 'Food'
GROUP BY b.stars

+----------------------+--------------+----------------------------------------+-----------------------------+
| category | city    | stars | hours                | review_count | name                                   | address                     |
+----------+---------+-------+----------------------+--------------+----------------------------------------+-----------------------------+
| Food     | Phoenix |   3.0 | Saturday|5:00-20:00  |           52 | Starbucks                              | 4605 E Chandler Blvd, Ste A |
| Food     | Phoenix |   4.0 | Saturday|11:00-22:00 |          431 | Bootleggers Modern American Smokehouse | 3375 E Shea Blvd            |
+----------+---------+-------+----------------------+--------------+----------------------------------------+-----------------------------+		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
Still opened businesses have more stars then already closed         
         
ii. Difference 2:
Still opened businesses have more reviews then already closed            
         
         
SQL code used for analysis:
SELECT 
AVG(b.stars),
SUM(b.review_count),
AVG(b.review_count),
is_open
FROM business b INNER JOIN review r ON b.id = r.id
GROUP BY b.is_open

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
                  
iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset:

